"""
Sync traffic lights from Hamburg's server into our proxy server.

This script runs nightly and performs the following steps:
1. Download the latest traffic lights from Hamburg's server
2. Filter out traffic lights that won't send any data
3. Push the traffic lights to our proxy server
"""

import json
import os
import re

import pandas as pd
import requests

# Format: https://tld.iot.hamburg.de/v1.1/
FROST_HAMBURG_URL = os.environ['FROST_HAMBURG_URL']
# Format: http://localhost:8080/FROST-Server/v1.1/
FROST_PROXY_URL = os.environ['FROST_PROXY_URL']

if not FROST_HAMBURG_URL or not FROST_PROXY_URL:
    raise Exception('Missing environment variables')
if not FROST_HAMBURG_URL.endswith('/'):
    raise Exception('FROST_HAMBURG_URL must end with a slash')
if not FROST_PROXY_URL.endswith('/'):
    raise Exception('FROST_PROXY_URL must end with a slash')

EXCLUDE_LIST_FILE = os.environ['EXCLUDE_LIST_FILE']
if not EXCLUDE_LIST_FILE:
    raise Exception('Missing environment variable EXCLUDE_LIST_FILE')

# Step 1: Fetch all things
elements_per_page = 100
page = 0
things = []
while True:
    page_url = FROST_HAMBURG_URL + "Things?" + \
        "$filter=Datastreams/properties/serviceName eq 'HH_STA_traffic_lights' " + \
        "and (Datastreams/properties/layerName eq 'primary_signal' " + \
        "  or Datastreams/properties/layerName eq 'signal_program' " + \
        "  or Datastreams/properties/layerName eq 'cycle_second' " + \
        "  or Datastreams/properties/layerName eq 'detector_car' " + \
        "  or Datastreams/properties/layerName eq 'detector_bike') " + \
        "&$expand=Datastreams($expand=ObservedProperty,Sensor),Locations" + \
        "&$skip=" + str(page * elements_per_page)

    print(f'Downloading page {page} from {page_url}')
    response = requests.get(page_url)
    response.raise_for_status()
    response_json = response.json()
    if 'value' not in response_json:
        raise Exception('Missing value in response')
    if len(response_json['value']) == 0:
        print('Finished downloading all traffic lights')
        break
    for traffic_light in response_json['value']:
        things.append(traffic_light)
    page += 1

# Step 2: Find which traffic lights need to be excluded
df = pd.read_excel(EXCLUDE_LIST_FILE)
prefixes_to_exclude = set() # YYY for nodes, YYY_XXX for connections
for index, row in df.iterrows():
    # Find all numbers in the column "betroffene connection" using a regex
    connections = re.findall(r'\d+', str(row['betroffene connections']))
    connection_ranges = re.findall(r'\d+-\d+', str(row['betroffene connections']))
    node_id = str(int(row['Knoten'])) # Make sure the node ID is an integer
    if len(connections) == 0 and len(connection_ranges) == 0:
        # Complete node
        prefixes_to_exclude.add(node_id)
    else:
        # Add all connections to the set
        for connection in connections:
            connection_id = str(int(connection)) # Make sure the connection ID is an integer
            prefixes_to_exclude.add(node_id + '_' + connection_id)
        
        # Add all connection ranges to the set
        for connection_range in connection_ranges:
            connection_range_split = connection_range.split("-")
            if len(connection_range_split) == 2:
                from_id = int(connection_range_split[0])
                to_id = int(connection_range_split[1])
                for id in range(from_id, to_id - 1):
                    prefixes_to_exclude.add(node_id + '_' + str(id))
            
# Filter out things that need to be excluded
things_to_keep = []
for thing in things:
    thing_name = thing['name'] # This is the connection id YYY_XXX
    for prefix in prefixes_to_exclude:
        if thing_name.startswith(prefix):
            break
    else:
        things_to_keep.append(thing)

print(f'Keeping {len(things_to_keep)} traffic lights of {len(things)}')
# Step 3: Send the traffic lights to our proxy server
for thing in things_to_keep:
    # Go through the thing recursively and remove all fields containing an @
    # since these fields are autogenerated by the FROST server
    def remove_fields(obj):
        if isinstance(obj, dict):
            for key in list(obj.keys()):
                if '@' in key:
                    del obj[key]
                else:
                    remove_fields(obj[key])
        elif isinstance(obj, list):
            for item in obj:
                remove_fields(item)
    remove_fields(thing)
    response = requests.post(FROST_PROXY_URL + 'Things', data=json.dumps(thing))